import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Button,
  Divider,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  MenuItem,
  Select,
  FormControl,
  InputLabel,
  Chip,
  IconButton,
  Tooltip,
  Paper,
  Badge,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  ListItemSecondaryAction,
  LinearProgress,
  Snackbar,
  Alert,
  Card,
  CardHeader,
  CardContent,
  CardActions,
  Tabs,
  Tab,
  Modal
} from '@mui/material';
import {
  Add,
  GetApp,
  Edit,
  Delete,
  Search,
  FileUpload,
  Download,
  Description,
  CheckCircle,
  Warning,
  Error as ErrorIcon,
  Info,
  Person,
  Schedule,
  LocationOn,
  Link,
  History,
  Assignment,
  CloudUpload,
  CloudDownload,
  FilterList,
  Print,
  Share,
  Visibility,
  MoreVert,
  Close,
  Save,
  Cancel
} from '@mui/icons-material';
import { DataGrid, GridColDef, GridToolbar, GridActionsCellItem } from '@mui/x-data-grid';
import { v4 as uuidv4 } from 'uuid';
import { saveAs } from 'file-saver';
import { format } from 'date-fns';

// Types
interface Evidence {
  id: string;
  type: string;
  caseId: string;
  location: string;
  status: 'submitted' | 'processed' | 'analyzed' | 'archived' | 'in-transit';
  priority: 'low' | 'medium' | 'high' | 'critical';
  integrity: 'intact' | 'compromised' | 'partial';
  collectedBy: string;
  collectedDate: string;
  lastUpdated: string;
  description: string;
}

interface Note {
  id: string;
  content: string;
  createdAt: string;
  createdBy: string;
  updatedAt?: string;
  isEdited: boolean;
}

interface File {
  id: string;
  name: string;
  type: string;
  size: string;
  uploadedBy: string;
  uploadedAt: string;
}

interface CustodyEvent {
  id: string;
  handler: string;
  role: string;
  time: string;
  location: string;
  action: string;
}

const statusOptions = ['All', 'submitted', 'processed', 'analyzed', 'archived', 'in-transit'];
const priorityOptions = ['All', 'low', 'medium', 'high', 'critical'];
const integrityOptions = ['All', 'intact', 'compromised', 'partial'];

const initialEvidence: Evidence[] = [
  {
    id: 'E-001',
    type: 'Footwear',
    caseId: 'C-2023-015',
    location: 'Lab A',
    status: 'analyzed',
    priority: 'high',
    integrity: 'intact',
    collectedBy: 'Officer Smith',
    collectedDate: '2023-05-15T09:30:00Z',
    lastUpdated: '2023-05-15T14:45:00Z',
    description: 'Nike sneakers size 10 found at crime scene'
  },
  {
    id: 'E-002',
    type: 'DNA',
    caseId: 'C-2023-015',
    location: 'Lab B',
    status: 'processed',
    priority: 'critical',
    integrity: 'intact',
    collectedBy: 'Detective Johnson',
    collectedDate: '2023-05-16T11:20:00Z',
    lastUpdated: '2023-05-16T16:30:00Z',
    description: 'Blood sample from victim'
  },
  {
    id: 'E-003',
    type: 'Fingerprint',
    caseId: 'C-2023-014',
    location: 'Storage',
    status: 'archived',
    priority: 'medium',
    integrity: 'partial',
    collectedBy: 'Officer Lee',
    collectedDate: '2023-05-10T08:15:00Z',
    lastUpdated: '2023-05-10T10:45:00Z',
    description: 'Latent print from window'
  },
  {
    id: 'E-004',
    type: 'Ballistics',
    caseId: 'C-2023-016',
    location: 'Lab C',
    status: 'in-transit',
    priority: 'high',
    integrity: 'intact',
    collectedBy: 'Detective Williams',
    collectedDate: '2023-05-17T13:10:00Z',
    lastUpdated: '2023-05-17T13:10:00Z',
    description: '9mm bullet casing'
  }
];

const EvidenceInventory: React.FC = () => {
  const [evidence, setEvidence] = useState<Evidence[]>(initialEvidence);
  const [open, setOpen] = useState(false);
  const [openDetail, setOpenDetail] = useState(false);
  const [selectedEvidence, setSelectedEvidence] = useState<Evidence | null>(null);
  const [statusFilter, setStatusFilter] = useState('All');
  const [priorityFilter, setPriorityFilter] = useState('All');
  const [integrityFilter, setIntegrityFilter] = useState('All');
  const [searchTerm, setSearchTerm] = useState('');
  const [notes, setNotes] = useState<Note[]>([]);
  const [files, setFiles] = useState<File[]>([]);
  const [custodyChain, setCustodyChain] = useState<CustodyEvent[]>([]);
  const [activeTab, setActiveTab] = useState(0);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [notification, setNotification] = useState({
    open: false,
    message: '',
    severity: 'success' as 'success' | 'error' | 'warning' | 'info'
  });
  const [form, setForm] = useState<Omit<Evidence, 'id' | 'lastUpdated'>>({
    type: '',
    caseId: '',
    location: '',
    status: 'submitted',
    priority: 'medium',
    integrity: 'intact',
    collectedBy: '',
    collectedDate: new Date().toISOString(),
    description: ''
  });

  // Simulate fetching related data when evidence is selected
  useEffect(() => {
    if (selectedEvidence) {
      // Mock notes
      const mockNotes: Note[] = [
        {
          id: 'N-001',
          content: `Initial examination of ${selectedEvidence.type} evidence`,
          createdAt: new Date().toISOString(),
          createdBy: 'Analyst Smith',
          isEdited: false
        }
      ];
      setNotes(mockNotes);

      // Mock files
      const mockFiles: File[] = [
        {
          id: 'F-001',
          name: `${selectedEvidence.type.toLowerCase()}_image.jpg`,
          type: 'image/jpeg',
          size: '2.4 MB',
          uploadedBy: 'Officer Johnson',
          uploadedAt: new Date().toISOString()
        }
      ];
      setFiles(mockFiles);

      // Mock custody chain
      const mockCustody: CustodyEvent[] = [
        {
          id: 'C-001',
          handler: form.collectedBy || 'Unknown Officer',
          role: 'Collector',
          time: selectedEvidence.collectedDate,
          location: selectedEvidence.location,
          action: 'Collected'
        }
      ];
      setCustodyChain(mockCustody);
    }
  }, [selectedEvidence]);

  const handleOpen = () => setOpen(true);
  const handleClose = () => {
    setForm({
      type: '',
      caseId: '',
      location: '',
      status: 'submitted',
      priority: 'medium',
      integrity: 'intact',
      collectedBy: '',
      collectedDate: new Date().toISOString(),
      description: ''
    });
    setOpen(false);
  };

  const handleOpenDetail = (evidenceItem: Evidence) => {
    setSelectedEvidence(evidenceItem);
    setOpenDetail(true);
  };

  const handleCloseDetail = () => {
    setSelectedEvidence(null);
    setOpenDetail(false);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleAddEvidence = () => {
    if (!form.type || !form.caseId || !form.location || !form.collectedBy) {
      showNotification('Please fill in all required fields', 'error');
      return;
    }

    const newEvidence: Evidence = {
      id: `E-${uuidv4().slice(0, 4).toUpperCase()}`,
      ...form,
      lastUpdated: new Date().toISOString()
    };

    setEvidence((prev) => [...prev, newEvidence]);
    handleClose();
    showNotification('Evidence added successfully', 'success');
  };

  const handleUpdateEvidence = () => {
    if (!selectedEvidence) return;

    const updatedEvidence = evidence.map((item) =>
      item.id === selectedEvidence.id ? { ...item, ...form, lastUpdated: new Date().toISOString() } : item
    );

    setEvidence(updatedEvidence);
    setSelectedEvidence(null);
    handleCloseDetail();
    showNotification('Evidence updated successfully', 'success');
  };

  const handleDeleteEvidence = (id: string) => {
    setEvidence((prev) => prev.filter((item) => item.id !== id));
    showNotification('Evidence deleted successfully', 'success');
  };

  const handleExportCSV = () => {
    const csvContent = [
      ['Evidence ID', 'Type', 'Case ID', 'Location', 'Status', 'Priority', 'Integrity', 'Collected By', 'Collected Date', 'Last Updated', 'Description'],
      ...filteredEvidence.map((e) => [
        e.id,
        e.type,
        e.caseId,
        e.location,
        e.status,
        e.priority,
        e.integrity,
        e.collectedBy,
        format(new Date(e.collectedDate), 'yyyy-MM-dd HH:mm'),
        format(new Date(e.lastUpdated), 'yyyy-MM-dd HH:mm'),
        e.description
      ]),
    ]
      .map((row) => row.join(','))
      .join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, 'evidence_inventory.csv');
    showNotification('CSV exported successfully', 'success');
  };

  const handleFileUpload = () => {
    if (!selectedFile) return;

    // Simulate upload progress
    const interval = setInterval(() => {
      setUploadProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval);
          return 100;
        }
        return prev + 10;
      });
    }, 300);

    setTimeout(() => {
      const newFile: File = {
        id: `F-${uuidv4().slice(0, 4).toUpperCase()}`,
        name: selectedFile.name,
        type: selectedFile.type || 'unknown',
        size: `${(selectedFile.size / (1024 * 1024)).toFixed(2)} MB`,
        uploadedBy: 'Current User',
        uploadedAt: new Date().toISOString()
      };

      setFiles([...files, newFile]);
      setSelectedFile(null);
      setUploadProgress(0);
      showNotification('File uploaded successfully', 'success');
    }, 3000);
  };

  const showNotification = (message: string, severity: 'success' | 'error' | 'warning' | 'info') => {
    setNotification({ open: true, message, severity });
  };

  const handleCloseNotification = () => {
    setNotification({ ...notification, open: false });
  };

  const filteredEvidence = evidence.filter((e) => {
    const matchesStatus = statusFilter === 'All' || e.status === statusFilter;
    const matchesPriority = priorityFilter === 'All' || e.priority === priorityFilter;
    const matchesIntegrity = integrityFilter === 'All' || e.integrity === integrityFilter;
    const matchesSearch = searchTerm === '' ||
      e.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
      e.type.toLowerCase().includes(searchTerm.toLowerCase()) ||
      e.caseId.toLowerCase().includes(searchTerm.toLowerCase()) ||
      e.description.toLowerCase().includes(searchTerm.toLowerCase());

    return matchesStatus && matchesPriority && matchesIntegrity && matchesSearch;
  });

  const columns: GridColDef<Evidence>[] = [
    { field: 'id', headerName: 'Evidence ID', width: 140 },
    { field: 'type', headerName: 'Type', width: 150 },
    { field: 'caseId', headerName: 'Case ID', width: 130 },
    { field: 'location', headerName: 'Location', width: 180 },
    {
      field: 'status',
      headerName: 'Status',
      width: 150,
      renderCell: (params) => (
        <Chip
          label={params.value}
          color={
            params.value === 'analyzed'
              ? 'success'
              : params.value === 'processed'
              ? 'info'
              : params.value === 'archived'
              ? 'default'
              : 'warning'
          }
          size="small"
        />
      )
    },
    {
      field: 'priority',
      headerName: 'Priority',
      width: 120,
      renderCell: (params) => (
        <Chip
          label={params.value}
          color={
            params.value === 'critical'
              ? 'error'
              : params.value === 'high'
              ? 'warning'
              : params.value === 'medium'
              ? 'info'
              : 'success'
          }
          size="small"
        />
      )
    },
    {
      field: 'integrity',
      headerName: 'Integrity',
      width: 120,
      renderCell: (params) => (
        <Tooltip
          title={
            params.value === 'intact'
              ? 'Evidence is intact'
              : params.value === 'compromised'
              ? 'Evidence has been compromised'
              : 'Partial integrity issues'
          }
        >
          <Chip
            label={params.value}
            icon={
              params.value === 'intact' ? (
                <CheckCircle fontSize="small" />
              ) : params.value === 'compromised' ? (
                <ErrorIcon fontSize="small" />
              ) : (
                <Warning fontSize="small" />
              )
            }
            variant="outlined"
            size="small"
          />
        </Tooltip>
      )
    },
    {
      field: 'collectedDate',
      headerName: 'Collected',
      width: 160,
      valueFormatter: (params) => format(new Date(params.value), 'MMM dd, yyyy')
    },
    {
      field: 'lastUpdated',
      headerName: 'Last Updated',
      width: 160,
      valueFormatter: (params) => format(new Date(params.value), 'MMM dd, yyyy')
    },
    {
      field: 'actions',
      headerName: 'Actions',
      type: 'actions',
      width: 120,
      getActions: (params) => [
        <GridActionsCellItem
          icon={<Visibility />}
          label="View"
          onClick={() => handleOpenDetail(params.row)}
        />,
        <GridActionsCellItem
          icon={<Edit />}
          label="Edit"
          onClick={() => {
            setSelectedEvidence(params.row);
            setForm(params.row);
            handleOpen();
          }}
        />,
        <GridActionsCellItem
          icon={<Delete />}
          label="Delete"
          onClick={() => handleDeleteEvidence(params.row.id)}
        />
      ]
    }
  ];

  const fileColumns: GridColDef<File>[] = [
    { field: 'name', headerName: 'File Name', width: 250 },
    { field: 'type', headerName: 'Type', width: 150 },
    { field: 'size', headerName: 'Size', width: 100 },
    { field: 'uploadedBy', headerName: 'Uploaded By', width: 150 },
    {
      field: 'uploadedAt',
      headerName: 'Upload Date',
      width: 180,
      valueFormatter: (params) => format(new Date(params.value), 'MMM dd, yyyy HH:mm')
    },
    {
      field: 'actions',
      headerName: 'Actions',
      width: 120,
      sortable: false,
      renderCell: (params) => (
        <>
          <Tooltip title="Download">
            <IconButton onClick={() => showNotification(`Downloading ${params.row.name}...`, 'info')}>
              <Download fontSize="small" />
            </IconButton>
          </Tooltip>
          <Tooltip title="Delete">
            <IconButton
              onClick={() => {
                setFiles(files.filter((f) => f.id !== params.row.id));
                showNotification('File deleted', 'success');
              }}
            >
              <Delete fontSize="small" color="error" />
            </IconButton>
          </Tooltip>
        </>
      )
    }
  ];

  const custodyColumns: GridColDef<CustodyEvent>[] = [
    { field: 'handler', headerName: 'Handler', width: 180 },
    { field: 'role', headerName: 'Role', width: 150 },
    { field: 'action', headerName: 'Action', width: 150 },
    {
      field: 'time',
      headerName: 'Time',
      width: 180,
      valueFormatter: (params) => format(new Date(params.value), 'MMM dd, yyyy HH:mm')
    },
    { field: 'location', headerName: 'Location', width: 200 }
  ];

  return (
    <Box p={2}>
      <Typography variant="h5" gutterBottom>
        Evidence Inventory
      </Typography>
      <Typography variant="body1" color="text.secondary" gutterBottom>
        Full inventory of all evidence currently in the system. Use filters or export options below to manage records.
      </Typography>
      <Divider sx={{ mb: 2 }} />

      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
        <Box sx={{ display: 'flex', gap: 2 }}>
          <Button variant="contained" startIcon={<Add />} onClick={handleOpen}>
            Add Evidence
          </Button>
          <Button variant="outlined" startIcon={<GetApp />} onClick={handleExportCSV}>
            Export CSV
          </Button>
          <Button variant="outlined" startIcon={<Print />}>
            Print
          </Button>
          <Button variant="outlined" startIcon={<Share />}>
            Share
          </Button>
        </Box>

        <TextField
          variant="outlined"
          size="small"
          placeholder="Search evidence..."
          InputProps={{
            startAdornment: <Search color="action" />
          }}
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          sx={{ width: 300 }}
        />
      </Box>

      <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
        <FormControl size="small" sx={{ minWidth: 150 }}>
          <InputLabel>Status</InputLabel>
          <Select
            value={statusFilter}
            label="Status"
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            {statusOptions.map((status) => (
              <MenuItem key={status} value={status}>
                {status}
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        <FormControl size="small" sx={{ minWidth: 150 }}>
          <InputLabel>Priority</InputLabel>
          <Select
            value={priorityFilter}
            label="Priority"
            onChange={(e) => setPriorityFilter(e.target.value)}
          >
            {priorityOptions.map((priority) => (
              <MenuItem key={priority} value={priority}>
                {priority}
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        <FormControl size="small" sx={{ minWidth: 150 }}>
          <InputLabel>Integrity</InputLabel>
          <Select
            value={integrityFilter}
            label="Integrity"
            onChange={(e) => setIntegrityFilter(e.target.value)}
          >
            {integrityOptions.map((integrity) => (
              <MenuItem key={integrity} value={integrity}>
                {integrity}
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        <Button
          variant="outlined"
          startIcon={<FilterList />}
          onClick={() => {
            setStatusFilter('All');
            setPriorityFilter('All');
            setIntegrityFilter('All');
            setSearchTerm('');
          }}
        >
          Clear Filters
        </Button>
      </Box>

      <Box sx={{ height: 600 }}>
        <DataGrid
          rows={filteredEvidence}
          columns={columns}
          components={{ Toolbar: GridToolbar }}
          disableRowSelectionOnClick
          pageSizeOptions={[5, 10, 25]}
          getRowId={(row) => row.id}
        />
      </Box>

      {/* Add/Edit Evidence Modal */}
      <Dialog open={open} onClose={handleClose} fullWidth maxWidth="sm">
        <DialogTitle>{selectedEvidence ? 'Edit Evidence' : 'Add New Evidence'}</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            name="type"
            label="Evidence Type"
            fullWidth
            variant="outlined"
            value={form.type}
            onChange={handleChange}
            required
          />
          <TextField
            margin="dense"
            name="caseId"
            label="Case ID"
            fullWidth
            variant="outlined"
            value={form.caseId}
            onChange={handleChange}
            required
          />
          <TextField
            margin="dense"
            name="location"
            label="Location"
            fullWidth
            variant="outlined"
            value={form.location}
            onChange={handleChange}
            required
          />
          <TextField
            margin="dense"
            name="collectedBy"
            label="Collected By"
            fullWidth
            variant="outlined"
            value={form.collectedBy}
            onChange={handleChange}
            required
          />
          <TextField
            margin="dense"
            name="collectedDate"
            label="Collected Date"
            type="datetime-local"
            fullWidth
            variant="outlined"
            value={form.collectedDate.slice(0, 16)}
            onChange={handleChange}
            InputLabelProps={{ shrink: true }}
          />
          <TextField
            margin="dense"
            name="description"
            label="Description"
            fullWidth
            variant="outlined"
            multiline
            rows={3}
            value={form.description}
            onChange={handleChange}
          />
          <FormControl fullWidth margin="dense">
            <InputLabel>Status</InputLabel>
            <Select
              name="status"
              value={form.status}
              label="Status"
              onChange={(e) => setForm({ ...form, status: e.target.value as any })}
            >
              <MenuItem value="submitted">Submitted</MenuItem>
              <MenuItem value="processed">Processed</MenuItem>
              <MenuItem value="analyzed">Analyzed</MenuItem>
              <MenuItem value="archived">Archived</MenuItem>
              <MenuItem value="in-transit">In Transit</MenuItem>
            </Select>
          </FormControl>
          <FormControl fullWidth margin="dense">
            <InputLabel>Priority</InputLabel>
            <Select
              name="priority"
              value={form.priority}
              label="Priority"
              onChange={(e) => setForm({ ...form, priority: e.target.value as any })}
            >
              <MenuItem value="low">Low</MenuItem>
              <MenuItem value="medium">Medium</MenuItem>
              <MenuItem value="high">High</MenuItem>
              <MenuItem value="critical">Critical</MenuItem>
            </Select>
          </FormControl>
          <FormControl fullWidth margin="dense">
            <InputLabel>Integrity</InputLabel>
            <Select
              name="integrity"
              value={form.integrity}
              label="Integrity"
              onChange={(e) => setForm({ ...form, integrity: e.target.value as any })}
            >
              <MenuItem value="intact">Intact</MenuItem>
              <MenuItem value="compromised">Compromised</MenuItem>
              <MenuItem value="partial">Partial</MenuItem>
            </Select>
          </FormControl>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleClose}>Cancel</Button>
          <Button variant="contained" onClick={selectedEvidence ? handleUpdateEvidence : handleAddEvidence}>
            {selectedEvidence ? 'Update' : 'Add'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Evidence Detail Modal */}
      <Modal
        open={openDetail}
        onClose={handleCloseDetail}
        aria-labelledby="evidence-detail-modal"
        aria-describedby="evidence-detail-description"
      >
        <Box
          sx={{
            position: 'absolute',
            top: '50%',
            left: '50%',
            transform: 'translate(-50%, -50%)',
            width: '80%',
            maxWidth: 1200,
            bgcolor: 'background.paper',
            boxShadow: 24,
            borderRadius: 1,
            p: 4,
            maxHeight: '90vh',
            overflow: 'auto'
          }}
        >
          {selectedEvidence && (
            <>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography id="evidence-detail-modal" variant="h6" component="h2">
                  Evidence Details: {selectedEvidence.id}
                </Typography>
                <IconButton onClick={handleCloseDetail}>
                  <Close />
                </IconButton>
              </Box>

              <Tabs
                value={activeTab}
                onChange={(_, newValue) => setActiveTab(newValue)}
                sx={{ mb: 3 }}
              >
                <Tab label="Overview" />
                <Tab label="Notes" />
                <Tab label="Files" />
                <Tab label="Custody Chain" />
              </Tabs>

              {activeTab === 0 && (
                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <Card variant="outlined">
                      <CardHeader
                        title="Basic Information"
                        avatar={<Assignment />}
                        action={
                          <Chip
                            icon={
                              selectedEvidence.status === 'analyzed' ? (
                                <CheckCircle />
                              ) : selectedEvidence.status === 'processed' ? (
                                <Info />
                              ) : (
                                <Warning />
                              )
                            }
                            label={selectedEvidence.status.toUpperCase()}
                            color={
                              selectedEvidence.status === 'analyzed'
                                ? 'success'
                                : selectedEvidence.status === 'processed'
                                ? 'info'
                                : 'warning'
                            }
                            variant="outlined"
                          />
                        }
                      />
                      <CardContent>
                        <Typography variant="body1" gutterBottom>
                          <strong>Type:</strong> {selectedEvidence.type}
                        </Typography>
                        <Typography variant="body1" gutterBottom>
                          <strong>Case ID:</strong> {selectedEvidence.caseId}
                        </Typography>
                        <Typography variant="body1" gutterBottom>
                          <strong>Location:</strong> {selectedEvidence.location}
                        </Typography>
                        <Typography variant="body1" gutterBottom>
                          <strong>Collected By:</strong> {selectedEvidence.collectedBy}
                        </Typography>
                        <Typography variant="body1" gutterBottom>
                          <strong>Collected Date:</strong>{' '}
                          {format(new Date(selectedEvidence.collectedDate), 'MMM dd, yyyy HH:mm')}
                        </Typography>
                        <Typography variant="body1" gutterBottom>
                          <strong>Last Updated:</strong>{' '}
                          {format(new Date(selectedEvidence.lastUpdated), 'MMM dd, yyyy HH:mm')}
                        </Typography>
                      </CardContent>
                    </Card>
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <Card variant="outlined">
                      <CardHeader
                        title="Metadata"
                        avatar={<Info />}
                        action={
                          <Box sx={{ display: 'flex', gap: 1 }}>
                            <Chip
                              label={`Priority: ${selectedEvidence.priority}`}
                              color={
                                selectedEvidence.priority === 'critical'
                                  ? 'error'
                                  : selectedEvidence.priority === 'high'
                                  ? 'warning'
                                  : selectedEvidence.priority === 'medium'
                                  ? 'info'
                                  : 'success'
                              }
                              size="small"
                            />
                            <Chip
                              icon={
                                selectedEvidence.integrity === 'intact' ? (
                                  <CheckCircle />
                                ) : selectedEvidence.integrity === 'compromised' ? (
                                  <ErrorIcon />
                                ) : (
                                  <Warning />
                                )
                              }
                              label={`Integrity: ${selectedEvidence.integrity}`}
                              variant="outlined"
                              size="small"
                            />
                          </Box>
                        }
                      />
                      <CardContent>
                        <Typography variant="body1" gutterBottom>
                          <strong>Description:</strong>
                        </Typography>
                        <Typography variant="body2" paragraph>
                          {selectedEvidence.description}
                        </Typography>
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
              )}

              {activeTab === 1 && (
                <Paper sx={{ p: 3 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
                    <TextField
                      variant="outlined"
                      size="small"
                      placeholder="Search notes..."
                      InputProps={{
                        startAdornment: <Search color="action" />
                      }}
                      sx={{ width: 300 }}
                    />
                    <Button
                      variant="contained"
                      startIcon={<Add />}
                      onClick={() => {
                        // Implement add note functionality
                        showNotification('Add note clicked', 'info');
                      }}
                    >
                      Add Note
                    </Button>
                  </Box>

                  <List>
                    {notes.length === 0 ? (
                      <Typography variant="body2" color="textSecondary" sx={{ textAlign: 'center', p: 2 }}>
                        No notes found
                      </Typography>
                    ) : (
                      notes.map((note) => (
                        <React.Fragment key={note.id}>
                          <ListItem alignItems="flex-start">
                            <ListItemAvatar>
                              <Avatar>{note.createdBy.charAt(0)}</Avatar>
                            </ListItemAvatar>
                            <ListItemText
                              primary={note.content}
                              secondary={
                                <>
                                  <Typography
                                    component="span"
                                    variant="body2"
                                    color="textPrimary"
                                    sx={{ display: 'block' }}
                                  >
                                    {note.createdBy}
                                  </Typography>
                                  {format(new Date(note.createdAt), 'MMM dd, yyyy HH:mm')}
                                  {note.isEdited && (
                                    <Typography
                                      component="span"
                                      variant="caption"
                                      color="textSecondary"
                                      sx={{ ml: 1 }}
                                    >
                                      (edited)
                                    </Typography>
                                  )}
                                </>
                              }
                            />
                            <ListItemSecondaryAction>
                              <IconButton edge="end">
                                <Edit />
                              </IconButton>
                              <IconButton edge="end" color="error">
                                <Delete />
                              </IconButton>
                            </ListItemSecondaryAction>
                          </ListItem>
                          <Divider variant="inset" component="li" />
                        </React.Fragment>
                      ))
                    )}
                  </List>
                </Paper>
              )}

              {activeTab === 2 && (
                <Paper sx={{ p: 3 }}>
                  <Box sx={{ display: 'flex', justifyContent: 'flex-end', mb: 2 }}>
                    <Button
                      variant="contained"
                      startIcon={<FileUpload />}
                      onClick={() => {
                        // Implement file upload functionality
                        showNotification('File upload clicked', 'info');
                      }}
                    >
                      Upload File
                    </Button>
                  </Box>

                  <Box sx={{ height: 400 }}>
                    <DataGrid
                      rows={files}
                      columns={fileColumns}
                      pageSize={5}
                      rowsPerPageOptions={[5, 10, 25]}
                      components={{ Toolbar: GridToolbar }}
                      disableSelectionOnClick
                    />
                  </Box>
                </Paper>
              )}

              {activeTab === 3 && (
                <Paper sx={{ p: 3 }}>
                  <Box sx={{ height: 400 }}>
                    <DataGrid
                      rows={custodyChain}
                      columns={custodyColumns}
                      pageSize={5}
                      rowsPerPageOptions={[5, 10, 25]}
                      components={{ Toolbar: GridToolbar }}
                      disableSelectionOnClick
                    />
                  </Box>
                </Paper>
              )}
            </>
          )}
        </Box>
      </Modal>

      {/* Notification Snackbar */}
      <Snackbar
        open={notification.open}
        autoHideDuration={6000}
        onClose={handleCloseNotification}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert
          onClose={handleCloseNotification}
          severity={notification.severity}
          sx={{ width: '100%' }}
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default EvidenceInventory;